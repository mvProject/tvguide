name: Build debug

# Controls when the workflow will run
on:
  # workflow_call:
  push:
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  lint:
    name: Build debug apk
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Load Google Service file
        run: echo "${{ secrets.GOOGLE_SERVICES_JSON }}" | base64 --decode > ./app/google-services.json

      - name: Generate keystore.properties
        run: |
          cat <<EOF > keystore.properties
          storePassword:${{ secrets.KEYSTORE_PASS }}
          keyPassword:${{ secrets.ALIAS_PASS }}
          keyAlias:${{ secrets.ALIAS }}
          storeFile:${{ vars.KEYSTORE_STORE_FILE_PATH }}
          EOF

      - name: List output directory
        run: ls -l

      #- name: Decode Keystore
      #  env:
      #    ENCODED_STRING: ${{ secrets.KEYSTORE_JKS }}
      #    RELEASE_KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASS }}
      #    RELEASE_KEYSTORE_ALIAS: ${{ secrets.ALIAS }}
      #    RELEASE_KEY_PASSWORD: ${{ secrets.ALIAS_PASS }}
#
      #  run: |
      #    echo $ENCODED_STRING > keystore-b64.txt
      #    base64 -d keystore-b64.txt > mvproject.jks

      - name: Decode keystore and create jks
        run: echo "${{ secrets.KEYSTORE_JKS }}" | base64 --decode > mvproject.jks

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      #- name: Build debug APK
      #  run: ./gradlew assembleDebug

      - name: Build release APK
        run: ./gradlew assembleRelease

      - name: List output directory
        run: ls -R app/build/outputs/

      - name: Expose app version name
        run: echo "VERSION_NAME=$( ./gradlew -q app:printVersionName )" >> $GITHUB_ENV

      # - name: Upload debug APK
      #   uses: actions/upload-artifact@v4.4.0
      #   with:
      #     name: app-debug
      #     path: app/build/outputs/apk/debug/${{ env.VERSION_NAME }}.apk

      # - name: Get debug file apk path
      #   id: debugApk
      #   run: echo "debugFile=$(find app/build/outputs/apk/debug/*.apk)" >> $GITHUB_OUTPUT



      #- name: Upload debug APK
      #  uses: actions/upload-artifact@v4.4.0
      #  with:
      #    name: ${{ env.VERSION_NAME }}
      #    path: ${{ steps.debugApk.outputs.debugFile }}

      - name: Get release file apk path
        id: releaseApk
        run: echo "releaseFile=$(find app/build/outputs/apk/release/*.apk)" >> $GITHUB_OUTPUT

      - name: Upload release APK
        uses: actions/upload-artifact@v4.4.0
        with:
          name: ${{ env.VERSION_NAME }}
          path: ${{ steps.releaseApk.outputs.releaseFile }}